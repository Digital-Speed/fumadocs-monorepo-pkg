openapi: 3.0.3
info:
  title: Sample API
  description: A simple sample API for testing Redoc integration in Next.js
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

tags:
  - name: Users
    description: User management operations
  - name: Products
    description: Product catalog operations

paths:
  /users:
    get:
      tags:
        - Users
      summary: List all users
      description: Retrieve a paginated list of users
      operationId: listUsers
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              examples:
                success:
                  summary: Example user list
                  value:
                    data:
                      - id: 1
                        name: John Doe
                        email: john.doe@example.com
                        role: admin
                        createdAt: '2024-01-15T10:30:00Z'
                      - id: 2
                        name: Jane Smith
                        email: jane.smith@example.com
                        role: user
                        createdAt: '2024-01-16T14:20:00Z'
                    pagination:
                      page: 1
                      limit: 10
                      total: 2
                      totalPages: 1
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user account
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              newUser:
                summary: Example new user
                value:
                  name: Alice Johnson
                  email: alice.johnson@example.com
                  role: user
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                created:
                  summary: Created user response
                  value:
                    id: 3
                    name: Alice Johnson
                    email: alice.johnson@example.com
                    role: user
                    createdAt: '2024-01-17T09:15:00Z'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                user:
                  summary: Example user
                  value:
                    id: 1
                    name: John Doe
                    email: john.doe@example.com
                    role: admin
                    createdAt: '2024-01-15T10:30:00Z'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products:
    get:
      tags:
        - Products
      summary: List all products
      description: Retrieve a list of all available products
      operationId: listProducts
      parameters:
        - name: category
          in: query
          description: Filter by product category
          required: false
          schema:
            type: string
            enum:
              - electronics
              - clothing
              - books
              - home
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              examples:
                products:
                  summary: Example product list
                  value:
                    - id: 101
                      name: Laptop Pro
                      description: High-performance laptop
                      price: 1299.99
                      category: electronics
                      inStock: true
                    - id: 102
                      name: Wireless Mouse
                      description: Ergonomic wireless mouse
                      price: 29.99
                      category: electronics
                      inStock: true

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - role
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          description: Unique user identifier
          example: 1
        name:
          type: string
          description: User's full name
          example: John Doe
        email:
          type: string
          format: email
          description: User's email address
          example: john.doe@example.com
        role:
          type: string
          enum:
            - admin
            - user
            - guest
          description: User's role in the system
          example: user
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: '2024-01-15T10:30:00Z'

    CreateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: User's full name
          example: Alice Johnson
        email:
          type: string
          format: email
          description: User's email address
          example: alice.johnson@example.com
        role:
          type: string
          enum:
            - admin
            - user
            - guest
          default: user
          description: User's role in the system
          example: user

    Product:
      type: object
      required:
        - id
        - name
        - price
        - category
        - inStock
      properties:
        id:
          type: integer
          format: int64
          description: Unique product identifier
          example: 101
        name:
          type: string
          description: Product name
          example: Laptop Pro
        description:
          type: string
          description: Product description
          example: High-performance laptop
        price:
          type: number
          format: float
          minimum: 0
          description: Product price in USD
          example: 1299.99
        category:
          type: string
          enum:
            - electronics
            - clothing
            - books
            - home
          description: Product category
          example: electronics
        inStock:
          type: boolean
          description: Whether the product is in stock
          example: true

    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Items per page
          example: 10
        total:
          type: integer
          description: Total number of items
          example: 50
        totalPages:
          type: integer
          description: Total number of pages
          example: 5

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
          example: INVALID_INPUT
        message:
          type: string
          description: Human-readable error message
          example: The provided email address is invalid
        details:
          type: object
          description: Additional error details
          additionalProperties: true

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication

security:
  - bearerAuth: []


